#!/usr/bin/python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 2018-11-29
# Description: prepare database compatible with FISH-ProDe query script and
#              associated web-interface.
# 
# ------------------------------------------------------------------------------



# ==============================================================================

import argparse
import fish_prode as fp
import os
import pandas as pd
import socket
import sys
from tqdm import tqdm

parser = argparse.ArgumentParser(description = '''
Builds a database of complementary oligodeoxyribonucleotides (ODNs) in a format
compatible with FISH-ProDe.

DISCLAIMER: this script does NOT generate a new database. It only re-formats an
existing database to in a format compatible with FISH-ProDe.

The script uses takes as input a BED file (BED3) format and the reference
genome. The reference genome name must be compatible with UCSC standard.

When building a database for FISH-ProDe, it is possible to retain the ODNs
sequence in the database itself. While this generates larger files, it also
speeds up the process of probe design, since the script would not need to
retreive the ODN sequences from somewhere else.

To retain the ODN sequences in the database, use the --retain-sequences option.
When this option is used, the ODN sequences must be present in the input BED3
file as an additional column. Alternatively, if such column is not found, the
script queries UCSC for the sequences (this process requires an active internet
connection to contact the UCSC DAS server).

NOTE: only non-arbitrary nucleotides in standard IUPAC format are allowed in the
ODNs sequence. https://www.bioinformatics.org/sms/iupac.html

After the database is created, we advise running the fprode_dbcheck script to
test its integrity.

Details on the BED3 format are available on the UCSC website:
https://genome.ucsc.edu/FAQ/FAQformat.html#format1
''', formatter_class = argparse.RawDescriptionHelpFormatter)

parser.add_argument('bedFile', metavar = 'bedPath', type = str,
    help = '''Path to BED3 bed file. Optionally, a fourth column can be present
    with the sequence of the corresponding region''')
parser.add_argument('genome', metavar = 'refGen', type = str,
    help = 'Reference genome in NCBI-compatible format (e.g., hg19).')

parser.add_argument('-O', metavar = 'dirPath', type = str, default = '.',
    help = '''Path to directory where to build the database. Created if missing.
        Defaults to current directory.''')
parser.add_argument('--ucsc-das-uri', metavar = 'dasURI', type = str,
    default = 'http://genome.ucsc.edu/cgi-bin/das/dsn',
    help = '''(advanced option) URI to UCSC DAS server.
        Default: http://genome.ucsc.edu/cgi-bin/das/dsn''')

parser.add_argument('--retain-sequences', action = 'store_const',
    dest = 'retainSequences', const = True, default = False,
    help = 'Use this option to generate a database with sequences')
parser.add_argument('--list-refGenomes', action = 'store_const',
    dest = 'listRefGenomes', const = True, default = False,
    help = ''''List UCSC reference genomes and exit
        (requires internet connection)''')

version = "0.0.1"
parser.add_argument('--version', action = 'version',
    version = f'{sys.argv[0]} v{version}')

args = parser.parse_args()



refGenomes = fp.web.list_UCSC_reference_genomes(
    UCSC_DAS_URI = args.ucsc_das_uri, verbose = args.listRefGenomes)
if args.listRefGenomes:
    sys.exit()

assert os.path.isfile(args.bedFile), f'bed file not found: "{args.bedFile}"'
assert not os.path.isfile(args.O), f'expected folder, file found: "{args.O}"'
assert args.genome in refGenomes, f'genome "{args.genome}" not found @UCSC'

if not os.path.isdir(args.O):
    os.mkdir(args.O)

bed = fp.bioext.UCSCbed(args.bedFile)

if args.retainSequences:
    if bed.ncols >= 3:
        # Use 4th column
    else:
        # Retreive sequences from UCSC
else:
    for _, chromDF in tqdm(bed.df.groupby("chrom")):
        chromDF.to_csv(os.path.join(args.O, chromDF['chrom'].tolist()[0]),
            "\t", columns = ['chromStart', 'chromEnd'],
            header = False, index = False)

# END ==========================================================================

################################################################################
