#!/usr/bin/python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 2018-11-29
# Description: prepare database compatible with FISH-ProDe query script and
#              associated web-interface.
# 
# ------------------------------------------------------------------------------



# ==============================================================================

import argparse
import configparser
import fish_prode as fp
import numpy as np
import os
import pandas as pd
import sys
from tqdm import tqdm

parser = argparse.ArgumentParser(description = '''
Checks integrity of a database. Specifically:
- a ".config" file must be present
  * Chromosome length must correspond to the reference genome's.
  * Overlapping status must match.
  * Reference genome must be available at UCSC.
    (requires internet connection)
  * Sequence from reference genome can be verified.
    (optional, use --check-seq, requires internet connection)
- At least one non-empty chromosome file
  * Appropriate format (2-3 columns).
  * Positions must be sorted.
  * An ODN must end after it starts.
  * No ODNs can start from the same position.
  * No ODNs can be totally included in another one.
''', formatter_class = argparse.RawDescriptionHelpFormatter)

parser.add_argument('dbDirPath', type = str, default = '.',
    help = '''Path to database directory.''')

parser.add_argument('--ucsc-das-uri', metavar = 'dasURI', type = str,
    default = 'http://genome.ucsc.edu/cgi-bin/das/',
    help = '''(advanced option) URI to UCSC DAS server.
        Default: http://genome.ucsc.edu/cgi-bin/das/''')

parser.add_argument('--check-seq', action = 'store_const',
    dest = 'enforceBED3', const = True, default = False,
    help = 'Consider only first 3 columns of the bed file.')
parser.add_argument('--no-net', action = 'store_const',
    dest = 'hasNetwork', const = False, default = True,
    help = 'Skip checks that require internet connection.')

version = "0.0.1"
parser.add_argument('--version', action = 'version',
    version = f'{sys.argv[0]} v{version}')

args = parser.parse_args()

assert_msg = f'expected folder, file found: "{args.dbDirPath}"'
assert not os.path.isfile(args.dbDirPath), assert_msg
assert os.path.isdir(args.dbDirPath), f'folder not found: "{args.dbDirPath}"'

configPath = os.path.join(args.dbDirPath, ".config")
assert os.path.isfile(configPath), f'missing "{configPath}" file.'

print(" Reading .config file...")
IH = open(configPath, 'r')
config = configparser.ConfigParser()
config.read_string("".join(IH.readlines()))
IH.close()

dbName = config['DATABASE']['name']
print(f'   Database name: "{dbName}"')

refGenome = config['DATABASE']['refGenome']
print(f'   Reference genome: "{refGenome}"')
if args.hasNetwork:
  refGenomeList = fp.web.list_UCSC_reference_genomes(
      UCSC_DAS_URI = args.ucsc_das_uri)
  assert_msg = f'genome "{refGenome}" not found @UCSC'
  assert refGenome in refGenomeList, assert_msg
  print(f'    CHECKED')

hasSequences = config.getboolean('OLIGOS', 'sequence')
oligoLengthRange = (
  config.getint('OLIGOS', 'min_length'),
  config.getint('OLIGOS', 'max_length'))
hasOverlaps = config.getboolean('OLIGOS', 'overlaps')
print(f'   Contains sequences: {hasSequences}')
print(f'   Contains overlaps: {hasOverlaps}')
print(f'   Oligo length range: {oligoLengthRange}')

fileList = os.listdir(args.dbDirPath)
assert 1 < len(fileList), "no chromosome files found."
print(f' Found {len(fileList)-1} chromosomes.')

for chrom in fileList:
  if chrom != ".config":
    print(f'  Checking "{chrom}"')

    filePath = os.path.join(args.dbDirPath, chrom)
    chromData = pd.read_csv(filePath, '\t', header = None)

    assert 0 != chromData.shape[0], f'found empty chromosome file: "{filePath}"'
    print('    Non-empty: CHECKED')

    assert_msg = f'missing columns in chromosome file: "{filePath}"'
    assert 2 <= chromData.shape[1], assert_msg
    print('    Format: CHECKED')

    assert_msg = f'found unsorted chromosome file: "{filePath}"'
    assert all(chromData.iloc[:, 0].diff()[1:] > 0), assert_msg
    print('    ODN start positions: CHECKED')

    assert_msg = f'found unsorted chromosome file: "{filePath}"'
    assert all(chromData.iloc[:, 1].diff()[1:] >= 0), assert_msg
    print('    ODN end positions: CHECKED')

    oligoLengthList = chromData.iloc[:, 1] - chromData.iloc[:, 0]
    assert_msg = f'found ODN too small for ".config" in "{filePath}"'
    assert all(oligoLengthList >= oligoLengthRange[0]), assert_msg
    assert_msg = f'found ODN too big for ".config" in "{filePath}"'
    assert all(oligoLengthList <= oligoLengthRange[1]), assert_msg
    print('    ODN size: CHECKED')

    if hasOverlaps:
      endPositions = np.array(chromData.iloc[1:, 1])
      startPositions = np.array(chromData.iloc[:-1, 0])
      foundOverlaps = any(endPositions <= startPositions)
      assert_msg = f'overlaps status mismatch with .config in "{filePath}"'
      assert foundOverlaps == hasOverlaps, assert_msg
    print('    Overlap status: CHECKED')

    if hasSequences:
      assert_msg = f'missing sequence columns in "{filePath}"'
      assert chromData.shape[1] >= 3, assert_msg
    print('    Sequence column: CHECKED')

    # Check exact sequence
    if args.hasNetwork and hasSequences:
      print('    Checking single ODN sequences...')
      for i in tqdm(range(chromData.shape[0])):
        region = chromData.iloc[i, :]

        assert_msg = f'sequence length does not match oligo (#{i}) length'
        assert len(region[2]) == region[1]-region[0], assert_msg

        regionSequence = fp.web.get_sequence_from_UCSC(refGenome,
          chrom, region[0], region[1], UCSC_DAS_URI = args.ucsc_das_uri)
        assert_msg = f'sequence of oligo #{i} does not match UCSC'
        assert_msg += f'\nSequence: {region[2]}'
        assert_msg += f'\nUCSC seq: {regionSequence}'
        assert region[2] == regionSequence, assert_msg
      print('      CHECKED')

    # Chromosome size
    if args.hasNetwork:
      chromSize = fp.web.get_segment_size_from_UCSC(refGenome, chrom,
          UCSC_DAS_URI = args.ucsc_das_uri)
      assert_msg = f'chromosome size (chromSize) not respected in "{filePath}"'
      assert chromData.iloc[-1, 1] <= chromSize, assert_msg
      print('    Chromosome size: CHECKED')

# END ==========================================================================

################################################################################
